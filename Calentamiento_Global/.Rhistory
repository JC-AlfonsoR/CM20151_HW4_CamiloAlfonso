gp
```{r}
library(Quandl)
library(lubridate)
```
```
```{r}
head(Data,n=5L)
#Imprimir los 5 primeros datos
```
library(ggplot2)
```{r}
```{r}
#Cargar Paquetes
#Descargar datos
Data <- Quandl("CURRFX/USDCOP", trim_start="2000-01-01", trim_end="2015-02-23")
```{r}
#Cargar Paquetes
library(Quandl)
library(ggplot2)
library(lubridate)
```
```{r}
#Descargar datos
Data <- Quandl("CURRFX/USDCOP", trim_start="2000-01-01", trim_end="2015-02-23")
```
```{r}
#Imprimir los 5 primeros datos
head(Data,n=5L)
```
```{r}
#Graficar la serie de tiempo
gp <- ggplot(Data) + geom_point(aes(x=Date,y = Rate))
gp <- gp + labs(title=paste("USD-COP exchange rate from ",Data[nrow(Data),1]," to ",Data[1,1]))
gp
```
```{r}
#Agregar columna de 'year' para poder hacer facets acorde a 'year'
Data["year"] <- lapply(Data["Date"],year)
Data["month"] <- lapply(Data["Date"],month)
sp <- ggplot(Data,aes(x=month, y=Rate))
sp + facet_wrap(~year,scales="free")
sp
sp <- ggplot(Data,aes(x=month, y=Rate))
sp
sp <- ggplot(Data,aes(x=month, y=Rate)) + geom_line
sp <- ggplot(Data,aes(x=month, y=Rate)) + geom_line()
sp + facet_wrap(~year,scales="free")
sp
sp <- ggplot(Data,aes(x=month, y=Rate)) + geom_line()
sp + facet_wrap(~year,scales="free")
sp
sp <- ggplot(Data,aes(x=month, y=Rate)) + geom_point(shape=1)
sp + facet_wrap(~year,scales="free")
?lubridate
date
View(Data)
date[1,1]
date[1]
date[2]
library(lubridate)
date <- lapply(Data["Date"],ymd)
date <- Data["Date"]
lm(rate ~ date)
date <- lapply(Data["Date"],ymd)
lm(rate ~ date)
date <- lapply(Data["Date"],ts)
date
date <- lapply(Data["Date"],ymd)
date
d <- lapply(date,ts)
d
xts(Data$Rate, as.Date(Data$Date, format='%m/%d/%Y')
asd
xts(Data["Rate"], as.Date(Data["Date"], format='%m/%d/%Y')
$Date = as.Date(x$Date,format="%m/%d/%Y")
Data$Date = as.Date(Data$Date,format="%m/%d/%Y")
Data = xts(Data=Data$Rate, order.by=Data$Date)
library(Quandl)
library(ggplot2)
library(lubridate)
```
```{r}
#Descargar datos
Data <- Quandl("CURRFX/USDCOP", trim_start="2000-01-01", trim_end="2015-02-23")
x$Date = as.Date(x$Date,format="%m/%d/%Y"
as
Data$Date = as.Date(Data$Date,format="%y/%m/%d"
sa
x$Date = as.Date(x$Date,format="%Y/%m/%d"
p+aom}
lm(Data["Rate"]~Data[Date])
View(Data)
lm(Data["Rate"]~Data["Date"])
lm(Data["Rate"]~Data["Date"])
d <- lapply(Data["Date"],ymd)
a = ts(d)
d
install.packages("MODISTools")
library(ggplot2)
library(MODISTools)
gdURL <- "http://tiny.cc/gapminder"
gDat <- read.delim(file = gdURL)
str(gDat)
Bgt_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802220000_13_0/station.txt"
Bgt_data <- read.delim(file = Bgt_url)
str(Bgt_url)
View(Bgt_data)
library(gdata)
library(gdata)
install.packages("gdata")
Bogota_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802220000_13_0/station.txt"
Bogota_data <- read.table(Bogota_url)
View(Bogota_data)
str(Bogota_data)
head(Bogota_data)
View(Bogota_data)
View(Bogota_data)
Bogota_data[1,]
Bogota_data[,1]
View(Bogota_data)
library(gdata)
library(ggplot2)
library(MODISTools)
#Links
Bogota_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802220000_13_0/station.txt"
Cali_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802590000_13_0/station.txt"
Bucaramanga_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800940000_13_0/station.txt"
Barranquilla_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800280000_13_0/station.txt"
Ipiales_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305803700000_13_0/station.txt"
Bogota_rdata <- read.table(Bogota_url) #raw_data
library(gdata)
library(ggplot2)
library(MODISTools)
#Links
Bogota_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802220000_13_0/station.txt"
Cali_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802590000_13_0/station.txt"
Bucaramanga_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800940000_13_0/station.txt"
Barranquilla_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800280000_13_0/station.txt"
Ipiales_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305803700000_13_0/station.txt"
Bogota_rdata <- read.table(Bogota_url) #raw_data
library(gdata)
library(ggplot2)
library(MODISTools)
#Links
Bogota_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802220000_13_0/station.txt"
Cali_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802590000_13_0/station.txt"
Bucaramanga_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800940000_13_0/station.txt"
Barranquilla_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800280000_13_0/station.txt"
Ipiales_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305803700000_13_0/station.txt"
Bogota_rdata <- read.table(Bogota_url) #raw_data
Cali_rdata <- read.table(Cali_url)
Bucaramanga_rdata <- read.table(Bucaramanga_url)
Barranquilla_rdata <- read.table(Barranquilla_url)
Ipiales_rdata <- read.table(Ipiales_url)
Bogota_rdata
Bogota_rdata[1:,]
Bogota_rdata[1:]
Bogota_rdata[1,]
Bogota_rdata[,1]
Bogota_rdata[,2]
install.packages("reshape2")
install.packages("plyr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("data.table")
install.packages("Lahman")
pew <- read.delim(
file = "http://stat405.had.co.nz/data/pew.txt",
header = TRUE,
stringsAsFactors = FALSE,
check.names = F
)
head(pew)
View(pew)
View(pew)
library(reshape)
pew_tidy <- melt(
library(reshape2)
pew_tidy <- melt(
data = pew,
id = "religion",
variable.name = "income",
value.name = "frequency"
)
library(reshape2)
pew_tidy <- melt(
data = pew,
id = "religion",
variable.name = "income",
value.name = "frequency"
)
View(pew_tidy)
View(pew)
tb <- read.csv(
file = "data/tb.csv",
header = TRUE,
stringsAsFactors = FALSE
)
tb <- read.csv(
file = "http://stat405.had.co.nz/data/tb.csv",
header = TRUE,
stringsAsFactors = FALSE
)
View(tb)
Bogota_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802220000_13_0/station.txt"
Bogota_rdata <- read.table(Bogota_url)
Bogota_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305802220000_13_0/station.txt"
Bogota_rdata <- read.table(Bogota_url)
Bucaramanga_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800940000_13_0/station.txt"
Barranquilla_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800280000_13_0/station.txt"
#Cargar datos crudos
Bogota_rdata <- read.table(Bogota_url)
Barranquilla_rdata <- read.table(Barranquilla_url)
Bucaramanga_url <- "http://data.giss.nasa.gov/tmp/gistemp/STATIONS/tmp_305800940000_13_0/station.txt"
library(lubridate)
ymd("1998-FEB-2")
ymd("1998-JAN-2")
ymd("1998-ENE-2")
ymd("1998-01-2")
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(lubridate)
Ciudades <- c('Bogota', 'Barranquilla', 'Bucaramanga', 'Cali', 'Ipiales')
a = c() #Serie vacia
Data = data.frame(a,a,a) # DataFrame vacio. En este data frame se van a guardar los datos tidy
for(C in Ciudades) {
#Cargar datos
Data_raw <- read.table(
file = paste(C,".txt",sep=""),
header = TRUE)
Data_raw <- Data_raw[c(n)] #Guardar solo las 13 primeras columnas
n <- names(Data_raw)[1:13] #Seleccionar los nombres de las columnas a usar
# Tidy data. Hacer melt para generar datos tidy
Data_tidy <- melt(
data = Data_raw,
id = "YEAR",
variable.name = "Month",
value.name = "Temperature"
)
#Agregar columnas de Ciudad y dia
Data_tidy$Day = 1
Data_tidy$City = C
Data = rbind(Data,Data_tidy) #Agrupar todos los datos en un unico DataFrame
}
setwd("~/GitHub/CM20151_HW4_CamiloAlfonso/Calentamiento_Global")
setwd("./")
Ciudades <- c('Bogota', 'Barranquilla', 'Bucaramanga', 'Cali', 'Ipiales')
a = c() #Serie vacia
Data = data.frame(a,a,a) # DataFrame vacio. En este data frame se van a guardar los datos tidy
for(C in Ciudades) {
#Cargar datos
Data_raw <- read.table(
file = paste(C,".txt",sep=""),
header = TRUE)
n <- names(Data_raw)[1:13] #Seleccionar los nombres de las columnas a usar
Data_raw <- Data_raw[c(n)] #Guardar solo las 13 primeras columnas
# Tidy data. Hacer melt para generar datos tidy
Data_tidy <- melt(
data = Data_raw,
id = "YEAR",
variable.name = "Month",
value.name = "Temperature"
)
#Agregar columnas de Ciudad y dia
Data_tidy$Day = 1
Data_tidy$City = C
Data = rbind(Data,Data_tidy) #Agrupar todos los datos en un unico DataFrame
}
# Ordenar las columnas
Data <- Data[c("YEAR","Month","Day","City","Temperature")]
names(Data) <- c('anno','mes','fecha','ciudad','temperatura')
#Reemplazar datos de temperatura = 999.9 con NaN
Data$temperatura[Data$temperatura == 999.9] <- NaN
Data$fecha <- dmy(paste(1,Data$mes,Data$anno,sep="-"))
values(Data$mes)
Data$mes
ls
View(Data)
?replace
View(Data)
languageEl(dmy)
Data$mes[Data$mes == c("JAN","Dec")] <- c(1,12)
levels(iris$Species)
levels(Data$mes)
levels(Data$mes) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
View(Data)
Data$mes[Data$mes == c("JAN","Dec")] <- c(1,12)
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(lubridate)
setwd("./")
Ciudades <- c('Bogota', 'Barranquilla', 'Bucaramanga', 'Cali', 'Ipiales')
a = c() #Serie vacia
Data = data.frame(a,a,a) # DataFrame vacio. En este data frame se van a guardar los datos tidy
for(C in Ciudades) {
#Cargar datos
Data_raw <- read.table(
file = paste(C,".txt",sep=""),
header = TRUE)
n <- names(Data_raw)[1:13] #Seleccionar los nombres de las columnas a usar
Data_raw <- Data_raw[c(n)] #Guardar solo las 13 primeras columnas
# Tidy data. Hacer melt para generar datos tidy
Data_tidy <- melt(
data = Data_raw,
id = "YEAR",
variable.name = "Month",
value.name = "Temperature"
)
#Agregar columnas de Ciudad y dia
Data_tidy$Day = 1
Data_tidy$City = C
Data = rbind(Data,Data_tidy) #Agrupar todos los datos en un unico DataFrame
}
# Ordenar las columnas
Data <- Data[c("YEAR","Month","Day","City","Temperature")]
names(Data) <- c('anno','mes','fecha','ciudad','temperatura')
#Reemplazar datos de temperatura = 999.9 con NaN
Data$temperatura[Data$temperatura == 999.9] <- NaN
levels(Data$mes) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
View(Data)
Data$fecha <- dmy(paste(1,Data$mes,Data$anno,sep="-"))
View(Data)
levels(Data$mes) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
levels(Data$mes)
Ciudades <- c('Bogota', 'Barranquilla', 'Bucaramanga', 'Cali', 'Ipiales')
a = c() #Serie vacia
Data = data.frame(a,a,a) # DataFrame vacio. En este data frame se van a guardar los datos tidy
for(C in Ciudades) {
#Cargar datos
Data_raw <- read.table(
header = TRUE)
n <- names(Data_raw)[1:13] #Seleccionar los nombres de las columnas a usar
Data_raw <- Data_raw[c(n)] #Guardar solo las 13 primeras columnas
file = paste(C,".txt",sep=""),
# Tidy data. Hacer melt para generar datos tidy
Data_tidy <- melt(
data = Data_raw,
id = "YEAR",
Ciudades <- c('Bogota', 'Barranquilla', 'Bucaramanga', 'Cali', 'Ipiales')
a = c() #Serie vacia
Ciudades <- c('Bogota', 'Barranquilla', 'Bucaramanga', 'Cali', 'Ipiales')
a = c() #Serie vacia
Data = data.frame(a,a,a) # DataFrame vacio. En este data frame se van a guardar los datos tidy
for(C in Ciudades) {
#Cargar datos
Data_raw <- read.table(
file = paste(C,".txt",sep=""),
header = TRUE)
n <- names(Data_raw)[1:13] #Seleccionar los nombres de las columnas a usar
Data_raw <- Data_raw[c(n)] #Guardar solo las 13 primeras columnas
# Tidy data. Hacer melt para generar datos tidy
Data_tidy <- melt(
data = Data_raw,
id = "YEAR",
variable.name = "Month",
value.name = "Temperature"
)
#Agregar columnas de Ciudad y dia
Data_tidy$Day = 1
Data_tidy$City = C
Data = rbind(Data,Data_tidy) #Agrupar todos los datos en un unico DataFrame
}
# Ordenar las columnas
Data <- Data[c("YEAR","Month","Day","City","Temperature")]
names(Data) <- c('anno','mes','fecha','ciudad','temperatura')
#Reemplazar datos de temperatura = 999.9 con NaN
Data$temperatura[Data$temperatura == 999.9] <- NaN
D = Data
View(Data)
View(D)
levels(Data$mes) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
View(Data)
View(D)
Data$fecha <- dmy(paste(1,Data$mes,Data$anno,sep="-"))
View(Data)
library(ggplot2)
?plot
?plot{ggplot2}
setwd("~/GitHub/CM20151_HW4_CamiloAlfonso/Calentamiento_Global")
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(lubridate)
setwd("./")
Ciudades <- c('Bogota', 'Barranquilla', 'Bucaramanga', 'Cali', 'Ipiales')
a = c() #Serie vacia
Data = data.frame(a,a,a) # DataFrame vacio. En este data frame se van a guardar los datos tidy
for(C in Ciudades) {
#Cargar datos
Data_raw <- read.table(
file = paste(C,".txt",sep=""),
header = TRUE)
n <- names(Data_raw)[1:13] #Seleccionar los nombres de las columnas a usar
Data_raw <- Data_raw[c(n)] #Guardar solo las 13 primeras columnas
# Tidy data. Hacer melt para generar datos tidy
Data_tidy <- melt(
data = Data_raw,
id = "YEAR",
variable.name = "Month",
value.name = "Temperature"
)
#Agregar columnas de Ciudad y dia
Data_tidy$Day = 1
Data_tidy$City = C
Data = rbind(Data,Data_tidy) #Agrupar todos los datos en un unico DataFrame
}
# Ordenar las columnas
Data <- Data[c("YEAR","Month","Day","City","Temperature")]
names(Data) <- c('anno','mes','fecha','ciudad','temperatura')
#Reemplazar datos de temperatura = 999.9 con NaN
Data$temperatura[Data$temperatura == 999.9] <- NaN
# Se cambian los niveles del mes para que no haya problema al usar dmy{lubridate}
levels(Data$mes) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
Data$fecha <- dmy(paste(1,Data$mes,Data$anno,sep="-"))
# Graficar
#Graficar la serie de tiempo
names(Data)
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura))
gp
gp <- gp + labs(title="Temperatura en Ciudades de Colombia",ylab="Temperatura")
gp
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_wrap(~ciudad,scales="free")
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_wrap(ciudad~,scales="free")
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_wrap(~ciudad,scales="free")
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_grid(ciudad ~ .,scales="free")
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
gp
library(RColorBrewer)
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura, color=ciudad))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
gp
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_grid(ciudad ~ .,scales="free")
#sp + facet_grid(sex ~ .)
png(filename="Grafica1.png")
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura, color=ciudad))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
gp
dev.off()
png(filename="Grafica1.pdf")
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura, color=ciudad))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
gp
dev.off()
pdf(filename="Grafica1.pdf")
?pdf
?png
png(filename="Grafica1.png")
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura, color=ciudad))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
gp
dev.off()
png(filename="Grafica1.png")
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_grid(ciudad ~ .,scales="free")
dev.off()
png(filename="Grafica1.png")
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura, color=ciudad))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
gp
dev.off()
png(filename="Grafica2.png")
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_grid(ciudad ~ .,scales="free")
dev.off()
gp
sp
sp
gp
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_grid(ciudad ~ .,scales="free")
sp
w = 1000
h = 600
png(filename="Grafica1.png",
width = w, height = h)
gp <- ggplot(Data) + geom_point(aes(x=fecha,y = temperatura, color=ciudad))
gp <- gp + labs(title="Temperatura en Ciudades de Colombia")
gp
dev.off()
png(filename="Grafica2.png",
width = w, height = h))
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_grid(ciudad ~ .,scales="free")
dev.off()
png(filename="Grafica2.png",
width = w, height = h))
png(filename="Grafica2.png",
width = w, height = h)
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_grid(ciudad ~ .,scales="free")
dev.off()
png(filename="Grafica2.png",
width = w, height = h)
sp <- ggplot(Data,aes(x=fecha, y=temperatura)) + geom_point(shape=1)
sp + facet_wrap(~ciudad, scales="free", ncol=2)
dev.off()
#Guardar datos en csv
write.csv(Data, file = "Data.csv")
